class Node 
{
    int val, height;
    Node left, right;

    Node(int val) {
        this.val = val;
        this.height = 1; 
    }
}

class AVLTree 
{

    int getHeight(Node node) 
    {
        return (node == null) ? 0 : node.height;
    }

    int getBalance(Node node) 
    {
        return (node == null) ? 0 : getHeight(node.left) - getHeight(node.right);
    }

    Node rightRotate(Node y) 
    {
        Node x = y.left;
        Node T2 = x.right;

        x.right = y;
        y.left = T2;

        y.height = Math.max(getHeight(y.left), getHeight(y.right)) + 1;
        x.height = Math.max(getHeight(x.left), getHeight(x.right)) + 1;

        return x; 
    }

    Node leftRotate(Node x) 
    {
        Node y = x.right;
        Node T2 = y.left;

        y.left = x;
        x.right = T2;

        x.height = Math.max(getHeight(x.left), getHeight(x.right)) + 1;
        y.height = Math.max(getHeight(y.left), getHeight(y.right)) + 1;

        return y; 
    }

    Node leftRightRotate(Node z) {
        z.left = leftRotate(z.left); 
        return rightRotate(z);       
    }

    Node rightLeftRotate(Node z) {
        z.right = rightRotate(z.right); 
        return leftRotate(z);           
    }

    Node insert(Node node, int key) 
    {
        if (node == null) return new Node(key);

        if (key < node.val)
            node.left = insert(node.left, key);
        else if (key > node.val)
            node.right = insert(node.right, key);
        else
            return node;

        node.height = Math.max(getHeight(node.left), getHeight(node.right)) + 1;

        int balance = getBalance(node);

        if (balance > 1 && key < node.left.val)
            return rightRotate(node);

        // Case 2: RR Rotation
        if (balance < -1 && key > node.right.val)
            return leftRotate(node);

        // Case 3: LR Rotation
        if (balance > 1 && key > node.left.val)
            return leftRightRotate(node);

        // Case 4: RL Rotation
        if (balance < -1 && key < node.right.val)
            return rightLeftRotate(node);

        return node; // Return unchanged node if balanced
    }

    // Inorder traversal (to check sorted order)
    void inorder(Node root) {
        if (root != null) {
            inorder(root.left);
            System.out.print(root.val + " ");
            inorder(root.right);
        }
    }

    // Preorder traversal (to check tree structure)
    void preorder(Node root) {
        if (root != null) {
            System.out.print(root.val + " ");
            preorder(root.left);
            preorder(root.right);
        }
    }
}

// Main class to test AVL Tree
public class Main 
{
    public static void main(String[] args) 
    {
        AVLTree tree = new AVLTree();
        Node root = null;

        int[] elements = {30, 10, 20, 40, 50, 25};
        for (int val : elements) 
        {
            root = tree.insert(root, val);
        }

        System.out.print("Inorder Traversal (Sorted): ");
        tree.inorder(root);
        System.out.println();

        System.out.print("Preorder Traversal: ");
        tree.preorder(root);
        System.out.println();
    }
}
